/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
// tslint:disable: max-line-length
// tslint:disable: import-spacing
import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable, BehaviorSubject }                                        from 'rxjs';
import { tap } from 'rxjs/operators';
import { JwtToken } from '../model/jwtToken';
import { LoginApiRequest } from '../model/loginApiRequest';
import { RegisterRequest } from '../model/registerRequest';

import { COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { MarkLocationsRequest } from '../model/markLocationsRequest';
import { BASE_PATH } from 'src/environments/environment';
import { Platform } from '@ionic/angular';
import { Storage } from '@ionic/storage';

export const InterceptorSkipHeader = 'X-Skip-Interceptor';

@Injectable()
export class AccountsService {

    protected basePath = BASE_PATH;
    public defaultHeaders = new HttpHeaders().set(InterceptorSkipHeader, '');
    public configuration = new Configuration();
    public authSubject = new BehaviorSubject(false);

    constructor(protected httpClient: HttpClient,
                @Optional()@Inject(BASE_PATH) basePath: string,
                @Optional() configuration: Configuration,
                private platform: Platform,
                private storage: Storage ) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }

        this.platform.ready().then(() => {
            this.ifLoggedIn();
          });
    }

    public setAuthSubject() {
        this.authSubject.next(true);
    }

    public async logout() {
        await this.storage.remove('ACCESS_TOKEN');
        await this.storage.remove('USER_ID');
        await this.storage.remove('USER');
        await this.storage.remove('EXPIRES_IN');
        this.authSubject.next(false);
    }

    public isLoggedIn() {
        return this.authSubject.value;
    }

    public async getUserToken(): Promise<JwtToken> {
        if (this.isLoggedIn) {
            const token: JwtToken = {
                authToken: await this.storage.get('ACCESS_TOKEN'),
                id: await this.storage.get('USER_ID'),
                expiresIn: await this.storage.get('EXPIRES_IN')
            } as JwtToken;

            return token;
        }
    }

    // public async getLoggedInUser(): Promise<LoggedInUser> {
    //     if (this.isLoggedIn) {
    //         const user: LoggedInUser = await this.storage.get('USER') as LoggedInUser;
    //         return user;
    //     }
    // }

    ifLoggedIn() {
        this.storage.get('USER').then((response) => {
          if (response) {
            this.authSubject.next(true);
            console.log(response);
          }
        });
      }

    public async getToken(): Promise<string> {
        return await this.storage.get('ACCESS_TOKEN');
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     *
     *
     * @param requestApi
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountsLogin(requestApi: LoginApiRequest, observe?: 'body', reportProgress?: boolean): Observable<JwtToken>;
    public accountsLogin(requestApi: LoginApiRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JwtToken>>;
    public accountsLogin(requestApi: LoginApiRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JwtToken>>;
    public accountsLogin(requestApi: LoginApiRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (requestApi === null || requestApi === undefined) {
            throw new Error('Required parameter requestApi was null or undefined when calling accountsLogin.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<JwtToken>(`${this.basePath}/account/login`,
            requestApi,
            {
                withCredentials: this.configuration.withCredentials,
                headers,
                observe,
                reportProgress
            }
        ).pipe(
            tap(async res => {
                console.log(res);
                if (res.authToken !== null) {
                    await this.storage.set('ACCESS_TOKEN', res.authToken);
                    await this.storage.set('USER_ID', res.id);
                    await this.storage.set('EXPIRES_IN', res.expiresIn);
                    this.authSubject.next(true);
                } else {

                }
            })
        );
    }

     /**
     *
     *
     * @param email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountEmailTakenGet(email?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public accountEmailTakenGet(email?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public accountEmailTakenGet(email?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public accountEmailTakenGet(email?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email',  email as string);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys.Authorization) {
            headers = headers.set('Authorization', this.configuration.apiKeys.Authorization);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get', `${this.basePath}/account/email_taken`,
        {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers,
            observe,
            reportProgress
        }
        );
    }

 /**
     *
     *
     * @param email
     * @param password
     * @param firstname
     * @param lastname
     * @param birthday
     * @param title
     * @param education
     * @param avi
     * @param facebookId
     * @param birthLocation
     * @param residenceLocation
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountRegisterPostForm(registerRequest: RegisterRequest, observe?: 'body', reportProgress?: boolean): Observable<JwtToken>;
    public accountRegisterPostForm(registerRequest: RegisterRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JwtToken>>;
    public accountRegisterPostForm(registerRequest: RegisterRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JwtToken>>;
    public accountRegisterPostForm(registerRequest: RegisterRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys.Authorization) {
            headers = headers.set('Authorization', this.configuration.apiKeys.Authorization);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        const convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (registerRequest.email !== undefined) {
            formParams = formParams.append('Email',  registerRequest.email as any) as any || formParams;
        }
        if (registerRequest.password !== undefined) {
            formParams = formParams.append('Password',  registerRequest.password as any) as any || formParams;
        }
        if (registerRequest.firstname !== undefined) {
            formParams = formParams.append('Firstname',  registerRequest.firstname as any) as any || formParams;
        }
        if (registerRequest.lastname !== undefined) {
            formParams = formParams.append('Lastname',  registerRequest.lastname as any) as any || formParams;
        }
        if (registerRequest.birthday !== undefined) {
            formParams = formParams.append('Birthday',  registerRequest.birthday as any) as any || formParams;
        }
        if (registerRequest.title !== undefined) {
            formParams = formParams.append('Title',  registerRequest.title as any) as any || formParams;
        }
        if (registerRequest.education !== undefined) {
            formParams = formParams.append('Education',  registerRequest.education as any) as any || formParams;
        }
        if (registerRequest.avi !== undefined) {
            formParams = formParams.append('Avi',  registerRequest.avi as any) as any || formParams;
        }
        if (registerRequest.facebookId !== undefined) {
            formParams = formParams.append('FacebookId',  registerRequest.facebookId as any) as any || formParams;
        }
        if (registerRequest.birthLocation !== undefined) {
            formParams = formParams.append('BirthLocation',  registerRequest.birthLocation as any) as any || formParams;
        }
        if (registerRequest.residenceLocation !== undefined) {
            formParams = formParams.append('ResidenceLocation',  registerRequest.residenceLocation as any) as any || formParams;
        }

        return this.httpClient.request<JwtToken>('post', `${this.basePath}/account/register`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers,
                observe,
                reportProgress
            }
        ).pipe(
            tap(async res => {
                if (res.authToken) {
                    await this.storage.set('ACCESS_TOKEN', res.authToken);
                    await this.storage.set('USER_ID', res.id);
                    await this.storage.set('EXPIRES_IN', res.expiresIn);
                    // if (!postRegister) {
                    //     this.authSubject.next(true);
                    // }
                }
            })
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountUpdateLocationsPost(body?: MarkLocationsRequest, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public accountUpdateLocationsPost(body?: MarkLocationsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public accountUpdateLocationsPost(body?: MarkLocationsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public accountUpdateLocationsPost(body?: MarkLocationsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys.Authorization) {
            headers = headers.set('Authorization', this.configuration.apiKeys.Authorization);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<boolean>('post', `${this.basePath}/account/update/locations`,
            {
                body,
                withCredentials: this.configuration.withCredentials,
                headers,
                observe,
                reportProgress
            }
        );
    }

    /**
     *
     *
     * @param image
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public accountUpdateProfileImagePostForm(image?: Blob, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public accountUpdateProfileImagePostForm(image?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public accountUpdateProfileImagePostForm(image?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public accountUpdateProfileImagePostForm(image?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys.Authorization) {
            headers = headers.set('Authorization', this.configuration.apiKeys.Authorization);
        }

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        const convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (image !== undefined) {
            formParams = formParams.append('image',  image as any) as any || formParams;
        }

        return this.httpClient.request<boolean>('post', `${this.basePath}/account/update/profile_image`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers,
                observe,
                reportProgress
            }
        );
    }

}
