{"version":3,"sources":["./src/app/objects/validators/password.validator.ts","./src/app/pages/register/register-routing.module.ts","./src/app/pages/register/register.module.ts","./src/app/pages/register/register.page.ts","./src/app/pages/register/register.page.html"],"names":[],"mappings":"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","file":"pages-register-register-module-es2017.js","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\n\nexport class PasswordValidator {\n  // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\n  static areEqual(formGroup: FormGroup) {\n    let val;\n    let valid = true;\n\n    for (const key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        const control: FormControl = formGroup.controls[key] as FormControl;\n\n        if (val === undefined) {\n          val = control.value;\n        } else {\n          if (val !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (valid) {\n      return null;\n    }\n\n    return {\n      areEqual: true,\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RegisterPageRoutingModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","import { Component, NgZone, OnInit } from '@angular/core';\nimport { Router, NavigationExtras } from '@angular/router';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PasswordValidator } from 'src/app/objects/validators/password.validator';\nimport { AccountsService } from 'src/app/backend/clients';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n  matchingPasswordsGroup: FormGroup;\n  passwordType = 'password';\n  hasError = false;\n  error = '';\n  registerForm: FormGroup;\n\n  validationMessages = {\n    email: [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please enter a valid email.' }\n    ],\n    firstName: [\n      { type: 'required', message: 'First name is required.' }\n    ],\n    lastName: [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    password: [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' },\n      { type: 'pattern', message: 'Your password must contain an uppercase, lowercase, number, and character.' }\n    ],\n    confirmPassword: [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    matchingPasswords: [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n  };\n\n  constructor(\n    public formBuilder: FormBuilder,\n    public router: Router,\n    private zone: NgZone,\n    private accountService: AccountsService\n  ) { }\n\n\n  ngOnInit() {\n    const email = new FormControl('', Validators.compose([\n      Validators.required,\n      Validators.pattern('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}$')\n    ]));\n    this.matchingPasswordsGroup = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(7),\n        Validators.required,\n        Validators.pattern('^(?=.*[0-9])(?=.*[!@#$%.^&*?])[a-zA-Z0-9!@#$%.^&*?]{7,25}$')\n      ])),\n      confirmPassword: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n    const firstName = new FormControl('', Validators.required);\n    const lastName = new FormControl('', Validators.required);\n    this.registerForm = new FormGroup({\n      firstName,\n      lastName,\n      email,\n      matchingPasswords: this.matchingPasswordsGroup,\n    });\n  }\n\n  togglePasswordMode() {\n    this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\n  }\n\n  onSubmit() {\n    this.accountService.accountEmailTakenGet(this.registerForm.controls.email.value).pipe(take(1)).subscribe(res => {\n      if (res === false) {\n        const navigationExtras: NavigationExtras = {\n          replaceUrl: false,\n          state: {\n            firstName: this.registerForm.controls.firstName.value,\n            lastName: this.registerForm.controls.lastName.value,\n            email: this.registerForm.controls.email.value,\n            password: this.matchingPasswordsGroup.controls.password.value\n          }\n        };\n        this.zone.run(() => {\n          this.router.navigateByUrl('/post-register-about', navigationExtras);\n        });\n      } else {\n        this.hasError = true;\n        this.error = 'An account with this email is already registered.';\n      }\n    }, error => {\n      console.log(error);\n      this.hasError = true;\n      this.error = 'An unexpected error has occurred.';\n    });\n\n  }\n\n}\n","<ion-content no-bounce [scrollY]=\"false\">\n  <div class = \"splash\">\n  <h1>Create Account</h1>\n  <p class=\"back-to-login\">\n    Already have an account? <a [routerLink]=\"['/sign-in']\" routerLinkActive=\"router-link-active\" >Login instead</a>\n  </p>\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">  \n    <ion-grid>\n      <ion-row>\n        <ion-col>\n          <ion-item class=\"roundedInput\">\n            <ion-input autocapitalize=\"true\" placeholder=\"First Name*\" type=\"text\" formControlName=\"firstName\" required></ion-input>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.firstName\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('firstName').hasError(validation.type) && (registerForm.get('firstName').dirty || registerForm.get('firstName').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n          </ion-item>\n        </ion-col>\n        <ion-col>\n          <ion-item class=\"roundedInput\">\n            <ion-input autocapitalize=\"true\" placeholder=\"Last Name*\" type=\"text\" formControlName=\"lastName\" required></ion-input>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.lastName\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('lastName').hasError(validation.type) && (registerForm.get('lastName').dirty || registerForm.get('lastName').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n          </ion-item>\n        </ion-col>\n      </ion-row>\n      <ion-row>\n        <ion-col>\n          <ion-item class=\"roundedInput\">\n            <ion-input autocapitalize=\"true\" placeholder=\"Email*\" type=\"email\" formControlName=\"email\" required></ion-input>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.email\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('email').hasError(validation.type) && (registerForm.get('email').dirty || registerForm.get('email').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n          </ion-item>\n        </ion-col>\n      </ion-row>\n      <ion-row>\n        <ion-col>\n          <div formGroupName=\"matchingPasswords\">\n            <ion-item class=\"roundedInput\">\n              <ion-input autocapitalize=\"true\" [type]=\"passwordType\" placeholder=\"Password*\" formControlName=\"password\" required></ion-input>\n              <ion-icon name=\"eye\" item-right (click)=\"togglePasswordMode()\"></ion-icon>    \n            </ion-item>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.password\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('matchingPasswords').get('password').hasError(validation.type) && (registerForm.get('matchingPasswords').get('password').dirty || registerForm.get('matchingPasswords').get('password').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n            <ion-item class=\"roundedInput\">\n              <ion-input autocapitalize=\"true\" [type]=\"passwordType\"  placeholder=\"Confirm Password*\" formControlName=\"confirmPassword\" required></ion-input>\n            </ion-item>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.confirmPassword\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('matchingPasswords').get('confirmPassword').hasError(validation.type) && (registerForm.get('matchingPasswords').get('confirmPassword').dirty || registerForm.get('matchingPasswords').get('confirmPassword').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n          </div>\n          <!-- These validations are for the form group -->\n          <div class=\"validation-errors\">\n            <ng-container *ngFor=\"let validation of validationMessages.matchingPasswords\">\n              <div class=\"error-message\" *ngIf=\"registerForm.get('matchingPasswords').hasError(validation.type) && (registerForm.get('matchingPasswords').get('confirmPassword').dirty || registerForm.get('matchingPasswords').get('confirmPassword').touched)\">\n                <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n              </div>\n            </ng-container>\n          </div>\n          <div class=\"validation-errors\">\n              <div class=\"error-message\" *ngIf=\"hasError\">\n                <ion-icon name=\"information-circle-outline\"></ion-icon> {{ error }}\n              </div>\n          </div>\n        </ion-col>\n      </ion-row>\n      <!-- <ion-row color=\"primary\" justify-content-center *ngIf=\"displayError\">\n        <ion-text color=\"danger\">{{error}}</ion-text>\n      </ion-row> -->\n    </ion-grid>\n    <div class=\"button-div\">\n      <ion-button class=\"submit-button\" expand=\"block\" type=\"submit\" [disabled]=\"!registerForm.valid\">Register</ion-button>\n    </div>\n  </form>\n  <div class=\"button-div\">\n    <ion-button class=\"facebook-button\" expand=\"block\">\n      <ion-icon  slot=\"start\" name=\"logo-facebook\"></ion-icon>\n      Login with Facebook\n    </ion-button>\n    <ion-button class=\"apple-button\" expand=\"block\">\n      <ion-icon slot=\"start\" name=\"logo-apple\"></ion-icon>\n      Sign in with Apple\n    </ion-button>\n  </div>\n  </div>\n</ion-content>\n"],"sourceRoot":"webpack:///"}