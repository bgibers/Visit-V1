{"version":3,"sources":["webpack:///src/app/objects/validators/password.validator.ts","webpack:///src/app/pages/register/register-routing.module.ts","webpack:///src/app/pages/register/register.module.ts","webpack:///src/app/pages/register/register.page.ts","webpack:///src/app/pages/register/register.page.html"],"names":["PasswordValidator","formGroup","val","valid","key","controls","hasOwnProperty","control","undefined","value","areEqual","routes","path","component","RegisterPageRoutingModule","forChild","imports","exports","RegisterPageModule","declarations","RegisterPage","formBuilder","router","zone","accountService","passwordType","hasError","error","validationMessages","email","type","message","firstName","lastName","password","confirmPassword","matchingPasswords","compose","required","pattern","matchingPasswordsGroup","minLength","registerForm","accountEmailTakenGet","pipe","subscribe","res","navigationExtras","replaceUrl","state","run","navigateByUrl","console","log","onSubmit","togglePasswordMode","selector","templateUrl","styleUrls"],"mappings":"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","file":"pages-register-register-module-es5.js","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\n\nexport class PasswordValidator {\n\n  // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\n  static areEqual(formGroup: FormGroup) {\n    let val;\n    let valid = true;\n\n    for (const key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        const control: FormControl = formGroup.controls[key] as FormControl;\n\n        if (val === undefined) {\n          val = control.value;\n        } else {\n          if (val !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (valid) {\n      return null;\n    }\n\n    return {\n      areEqual: true\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RegisterPageRoutingModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","import { Component, NgZone, OnInit } from '@angular/core';\nimport { Router, NavigationExtras } from '@angular/router';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PasswordValidator } from 'src/app/objects/validators/password.validator';\nimport { AccountsService } from 'src/app/backend/clients';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n  matchingPasswordsGroup: FormGroup;\n  passwordType = 'password';\n  hasError = false;\n  error = '';\n  registerForm: FormGroup;\n\n  validationMessages = {\n    email: [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please enter a valid email.' }\n    ],\n    firstName: [\n      { type: 'required', message: 'First name is required.' }\n    ],\n    lastName: [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    password: [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' },\n      { type: 'pattern', message: 'Your password must contain an uppercase, lowercase, number, and character.' }\n    ],\n    confirmPassword: [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    matchingPasswords: [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n  };\n\n  constructor(\n    public formBuilder: FormBuilder,\n    public router: Router,\n    private zone: NgZone,\n    private accountService: AccountsService\n  ) { }\n\n\n  ngOnInit() {\n    const email = new FormControl('', Validators.compose([\n      Validators.required,\n      Validators.pattern('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}$')\n    ]));\n    this.matchingPasswordsGroup = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(7),\n        Validators.required,\n        Validators.pattern('^(?=.*[0-9])(?=.*[!@#$%.^&*?])[a-zA-Z0-9!@#$%.^&*?]{7,25}$')\n      ])),\n      confirmPassword: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n    const firstName = new FormControl('', Validators.required);\n    const lastName = new FormControl('', Validators.required);\n    this.registerForm = new FormGroup({\n      firstName,\n      lastName,\n      email,\n      matchingPasswords: this.matchingPasswordsGroup,\n    });\n  }\n\n  togglePasswordMode() {\n    this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\n  }\n\n  onSubmit() {\n    this.accountService.accountEmailTakenGet(this.registerForm.controls.email.value).pipe(take(1)).subscribe(res => {\n      if (res === false) {\n        const navigationExtras: NavigationExtras = {\n          replaceUrl: false,\n          state: {\n            firstName: this.registerForm.controls.firstName.value,\n            lastName: this.registerForm.controls.lastName.value,\n            email: this.registerForm.controls.email.value,\n            password: this.matchingPasswordsGroup.controls.password.value\n          }\n        };\n        this.zone.run(() => {\n          this.router.navigateByUrl('/post-register-about', navigationExtras);\n        })\n      } else {\n        this.hasError = true;\n        this.error = 'An account with this email is already registered.';\n      }\n    }, error => {\n      console.log(error)\n      this.hasError = true;\n      this.error = 'An unexpected error has occurred.';\n    });\n\n  }\n\n}\n","<ion-content no-bounce>\n  <h1>Create Account</h1>\n  <p class=\"back-to-login\">\n    Already have an account? <a [routerLink]=\"['/sign-in']\" routerLinkActive=\"router-link-active\" >Login instead</a>\n  </p>\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">  \n    <ion-grid>\n      <ion-row>\n        <ion-col>\n          <ion-item class=\"roundedInput\">\n            <ion-input autocapitalize=\"true\" placeholder=\"First Name*\" type=\"text\" formControlName=\"firstName\" required></ion-input>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.firstName\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('firstName').hasError(validation.type) && (registerForm.get('firstName').dirty || registerForm.get('firstName').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n          </ion-item>\n        </ion-col>\n        <ion-col>\n          <ion-item class=\"roundedInput\">\n            <ion-input autocapitalize=\"true\" placeholder=\"Last Name*\" type=\"text\" formControlName=\"lastName\" required></ion-input>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.lastName\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('lastName').hasError(validation.type) && (registerForm.get('lastName').dirty || registerForm.get('lastName').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n          </ion-item>\n        </ion-col>\n      </ion-row>\n      <ion-row>\n        <ion-col>\n          <ion-item class=\"roundedInput\">\n            <ion-input autocapitalize=\"true\" placeholder=\"Email*\" type=\"email\" formControlName=\"email\" required></ion-input>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.email\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('email').hasError(validation.type) && (registerForm.get('email').dirty || registerForm.get('email').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n          </ion-item>\n        </ion-col>\n      </ion-row>\n      <ion-row>\n        <ion-col>\n          <div formGroupName=\"matchingPasswords\">\n            <ion-item class=\"roundedInput\">\n              <ion-input autocapitalize=\"true\" [type]=\"passwordType\" placeholder=\"Password*\" formControlName=\"password\" required></ion-input>\n              <ion-icon name=\"eye\" item-right (click)=\"togglePasswordMode()\"></ion-icon>    \n            </ion-item>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.password\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('matchingPasswords').get('password').hasError(validation.type) && (registerForm.get('matchingPasswords').get('password').dirty || registerForm.get('matchingPasswords').get('password').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n            <ion-item class=\"roundedInput\">\n              <ion-input autocapitalize=\"true\" [type]=\"passwordType\"  placeholder=\"Confirm Password*\" formControlName=\"confirmPassword\" required></ion-input>\n            </ion-item>\n            <div class=\"validation-errors\">\n              <ng-container *ngFor=\"let validation of validationMessages.confirmPassword\">\n                <div class=\"error-message\" *ngIf=\"registerForm.get('matchingPasswords').get('confirmPassword').hasError(validation.type) && (registerForm.get('matchingPasswords').get('confirmPassword').dirty || registerForm.get('matchingPasswords').get('confirmPassword').touched)\">\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n                </div>\n              </ng-container>\n            </div>\n          </div>\n          <!-- These validations are for the form group -->\n          <div class=\"validation-errors\">\n            <ng-container *ngFor=\"let validation of validationMessages.matchingPasswords\">\n              <div class=\"error-message\" *ngIf=\"registerForm.get('matchingPasswords').hasError(validation.type) && (registerForm.get('matchingPasswords').get('confirmPassword').dirty || registerForm.get('matchingPasswords').get('confirmPassword').touched)\">\n                <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n              </div>\n            </ng-container>\n          </div>\n          <div class=\"validation-errors\">\n              <div class=\"error-message\" *ngIf=\"hasError\">\n                <ion-icon name=\"information-circle-outline\"></ion-icon> {{ error }}\n              </div>\n          </div>\n        </ion-col>\n      </ion-row>\n      <!-- <ion-row color=\"primary\" justify-content-center *ngIf=\"displayError\">\n        <ion-text color=\"danger\">{{error}}</ion-text>\n      </ion-row> -->\n    </ion-grid>\n    <div class=\"button-div\">\n      <ion-button class=\"submit-button\" expand=\"block\" type=\"submit\" [disabled]=\"!registerForm.valid\">Register</ion-button>\n    </div>\n  </form>\n  <div class=\"button-div\">\n    <ion-button class=\"facebook-button\" expand=\"block\">\n      <ion-icon  slot=\"start\" name=\"logo-facebook\"></ion-icon>\n      Login with Facebook\n    </ion-button>\n    <ion-button class=\"apple-button\" expand=\"block\">\n      <ion-icon slot=\"start\" name=\"logo-apple\"></ion-icon>\n      Sign in with Apple\n    </ion-button>\n  </div>\n</ion-content>\n"]}