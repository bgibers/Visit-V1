{"version":3,"sources":["webpack:///src/app/objects/validators/password.validator.ts","webpack:///src/app/pages/register/register-routing.module.ts","webpack:///src/app/pages/register/register.module.ts","webpack:///src/app/pages/register/register.page.ts","webpack:///src/app/pages/register/register.page.html"],"names":["PasswordValidator","formGroup","val","valid","key","controls","hasOwnProperty","control","undefined","value","areEqual","routes","path","component","RegisterPageRoutingModule","forChild","imports","exports","RegisterPageModule","declarations","RegisterPage","formBuilder","router","platform","zone","accountService","passwordType","hasError","error","showAppleSignIn","validationMessages","email","type","message","firstName","lastName","password","confirmPassword","matchingPasswords","is","compose","required","pattern","matchingPasswordsGroup","minLength","registerForm","loginApple","then","res","firstLogin","navigationExtras","replaceUrl","state","sso","run","navigateByUrl","accountEmailTakenGet","pipe","subscribe","console","log","onSubmit","togglePasswordMode","selector","templateUrl","styleUrls"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;;AAAA;AAAA;AAAA;;QAAaA,iB;;;;;;;AACX;iCACgBC,S,EAAsB;AACpC,cAAIC,GAAJ;AACA,cAAIC,KAAK,GAAG,IAAZ;;AAEA,eAAK,IAAMC,GAAX,IAAkBH,SAAS,CAACI,QAA5B,EAAsC;AACpC,gBAAIJ,SAAS,CAACI,QAAV,CAAmBC,cAAnB,CAAkCF,GAAlC,CAAJ,EAA4C;AAC1C,kBAAMG,OAAO,GAAgBN,SAAS,CAACI,QAAV,CAAmBD,GAAnB,CAA7B;;AAEA,kBAAIF,GAAG,KAAKM,SAAZ,EAAuB;AACrBN,mBAAG,GAAGK,OAAO,CAACE,KAAd;AACD,eAFD,MAEO;AACL,oBAAIP,GAAG,KAAKK,OAAO,CAACE,KAApB,EAA2B;AACzBN,uBAAK,GAAG,KAAR;AACA;AACD;AACF;AACF;AACF;;AAED,cAAIA,KAAJ,EAAW;AACT,mBAAO,IAAP;AACD;;AAED,iBAAO;AACLO,oBAAQ,EAAE;AADL,WAAP;AAGD;;;;;;;;;;;;;;;;;;;;;AC9BH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,QAAMC,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,CAAvB;;QAWaC,yB;;;;;YAAAA;;;;yBAAAA,yB;AAAyB,O;AAAA,gBAH3B,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAG2B,EAF1B,4DAE0B;;;;0HAAzBG,yB,EAAyB;AAAA;AAAA,kBAF1B,4DAE0B;AAAA,O;AAFd,K;;;;;sEAEXA,yB,EAAyB;cAJrC,sDAIqC;eAJ5B;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAI4B,Q;;;;;;;;;;;;;;;;;;AChBtC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAoBaC,kB;;;;;YAAAA;;;;yBAAAA,kB;AAAkB,O;AAAA,gBATpB,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,kEAJO,EAKP,kFALO,CASoB;;;;0HAAlBA,kB,EAAkB;AAAA,uBAFd,2DAEc;AAFF,kBANzB,4DAMyB,EALzB,0DAKyB,EAJzB,0DAIyB,EAHzB,kEAGyB,EAFzB,kFAEyB;AAEE,O;AAJF,K;;;;;sEAIhBA,kB,EAAkB;cAV9B,sDAU8B;eAVrB;AACRF,iBAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,kEAJO,EAKP,kFALO,CADD;AAQRG,sBAAY,EAAE,CAAC,2DAAD;AARN,S;AAUqB,Q;;;;;;;;;;;;;;;;;;ACpB/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACqBgB;;AACE;;AAAwD;;AAC1D;;;;;;AAD0D;;AAAA;;;;;;AAF5D;;AACE;;AAGF;;;;;;;;AAH6B;;AAAA;;;;;;AAY3B;;AACE;;AAAwD;;AAC1D;;;;;;AAD0D;;AAAA;;;;;;AAF5D;;AACE;;AAGF;;;;;;;;AAH6B;;AAAA;;;;;;AAc3B;;AACE;;AAAwD;;AAC1D;;;;;;AAD0D;;AAAA;;;;;;AAF5D;;AACE;;AAGF;;;;;;;;AAH6B;;AAAA;;;;;;AAiB3B;;AACE;;AAAwD;;AAC1D;;;;;;AAD0D;;AAAA;;;;;;AAF5D;;AACE;;AAGF;;;;;;;;AAH6B;;AAAA;;;;;;AAU3B;;AACE;;AAAwD;;AAC1D;;;;;;AAD0D;;AAAA;;;;;;AAF5D;;AACE;;AAGF;;;;;;;;AAH6B;;AAAA;;;;;;AAS7B;;AACE;;AAAwD;;AAC1D;;;;;;AAD0D;;AAAA;;;;;;AAF5D;;AACE;;AAGF;;;;;;;;AAH6B;;AAAA;;;;;;AAM3B;;AACE;;AAAwD;;AAC1D;;;;;;AAD0D;;AAAA;;;;;;;;AAkBpE;;AAAgD;AAAA;;AAAA;;AAAA;AAAA;;AAC9C;;AACA;;AACF;;;;;;;;QDjGSC,Y;AAgCX,4BACSC,WADT,EAESC,MAFT,EAGUC,QAHV,EAIUC,IAJV,EAKUC,cALV,EAKyC;AAAA;;AAJhC,aAAAJ,WAAA,GAAAA,WAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACC,aAAAC,QAAA,GAAAA,QAAA;AACA,aAAAC,IAAA,GAAAA,IAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AAnCV,aAAAC,YAAA,GAAe,UAAf;AACA,aAAAC,QAAA,GAAW,KAAX;AACA,aAAAC,KAAA,GAAQ,EAAR;AAEA,aAAAC,eAAA,GAAkB,KAAlB;AAEA,aAAAC,kBAAA,GAAqB;AACnBC,eAAK,EAAE,CACL;AAAEC,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADK,EAEL;AAAED,gBAAI,EAAE,SAAR;AAAmBC,mBAAO,EAAE;AAA5B,WAFK,CADY;AAKnBC,mBAAS,EAAE,CACT;AAAEF,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADS,CALQ;AAQnBE,kBAAQ,EAAE,CACR;AAAEH,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADQ,CARS;AAWnBG,kBAAQ,EAAE,CACR;AAAEJ,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADQ,EAER;AAAED,gBAAI,EAAE,WAAR;AAAqBC,mBAAO,EAAE;AAA9B,WAFQ,EAGR;AAAED,gBAAI,EAAE,SAAR;AAAmBC,mBAAO,EAAE;AAA5B,WAHQ,CAXS;AAgBnBI,yBAAe,EAAE,CACf;AAAEL,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADe,CAhBE;AAmBnBK,2BAAiB,EAAE,CACjB;AAAEN,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADiB;AAnBA,SAArB;AA8BK;;;;mCAGM;AACT,eAAKJ,eAAL,GAAuB,KAAKN,QAAL,CAAcgB,EAAd,CAAiB,KAAjB,CAAvB;AAEA,cAAMR,KAAK,GAAG,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWS,OAAX,CAAmB,CACnD,0DAAWC,QADwC,EAEnD,0DAAWC,OAAX,CAAmB,kDAAnB,CAFmD,CAAnB,CAApB,CAAd;AAIA,eAAKC,sBAAL,GAA8B,IAAI,wDAAJ,CAAc;AAC1CP,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWI,OAAX,CAAmB,CAC/C,0DAAWI,SAAX,CAAqB,CAArB,CAD+C,EAE/C,0DAAWH,QAFoC,EAG/C,0DAAWC,OAAX,CAAmB,4DAAnB,CAH+C,CAAnB,CAApB,CADgC;AAM1CL,2BAAe,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWI,QAA/B;AANyB,WAAd,EAO3B,UAACxC,SAAD,EAA0B;AAC3B,mBAAO,gGAAkBS,QAAlB,CAA2BT,SAA3B,CAAP;AACD,WAT6B,CAA9B;AAUA,cAAMiC,SAAS,GAAG,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWO,QAA/B,CAAlB;AACA,cAAMN,QAAQ,GAAG,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,0DAAWM,QAA/B,CAAjB;AACA,eAAKI,YAAL,GAAoB,IAAI,wDAAJ,CAAc;AAChCX,qBAAS,EAATA,SADgC;AAEhCC,oBAAQ,EAARA,QAFgC;AAGhCJ,iBAAK,EAALA,KAHgC;AAIhCO,6BAAiB,EAAE,KAAKK;AAJQ,WAAd,CAApB;AAMD;;;6CAEoB;AACnB,eAAKjB,YAAL,GAAoB,KAAKA,YAAL,KAAsB,MAAtB,GAA+B,UAA/B,GAA4C,MAAhE;AACD;;;;;;;;;;;;2BAGO,KAAKD,cAAL,CAAoBqB,UAApB,GAAiCC,IAAjC;AAAA,yFAAsC,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACxC,oCAAIA,GAAG,CAACC,UAAJ,KAAmB,IAAvB,EAA6B;AACrBC,kDADqB,GACgB;AACzCC,8CAAU,EAAE,KAD6B;AAEzCC,yCAAK,EAAE;AACLlB,+CAAS,EAAEc,GAAG,CAACd,SADV;AAELC,8CAAQ,EAAEa,GAAG,CAACb,QAFT;AAGLJ,2CAAK,EAAEiB,GAAG,CAACjB,KAHN;AAILK,8CAAQ,EAAE,EAJL;AAKLiB,yCAAG,EAAE;AALA;AAFkC,mCADhB;;AAW3B,uCAAI,CAAC7B,IAAL,CAAU8B,GAAV,CAAc,YAAM;AAClB,yCAAI,CAAChC,MAAL,CAAYiC,aAAZ,CAA0B,sBAA1B,EAAkDL,gBAAlD;AACD,mCAFD;AAGD,iCAdD,MAcO;AACCA,mDADD,GACsC;AACzCC,8CAAU,EAAE;AAD6B,mCADtC;;AAIL,uCAAI,CAAC3B,IAAL,CAAU8B,GAAV,CAAc,YAAM;AAClB,yCAAI,CAAChC,MAAL,CAAYiC,aAAZ,CAA0B,OAA1B,EAAmCL,iBAAnC;AACD,mCAFD;AAGD;;AAtBuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAtC;;AAAA;AAAA;AAAA;AAAA,wB;;;;;;;;;;;;;;;;;;mCA0BG;AAAA;;AACT,eAAKzB,cAAL,CAAoB+B,oBAApB,CAAyC,KAAKX,YAAL,CAAkBxC,QAAlB,CAA2B0B,KAA3B,CAAiCtB,KAA1E,EAAiFgD,IAAjF,CAAsF,4DAAK,CAAL,CAAtF,EAA+FC,SAA/F,CAAyG,UAAAV,GAAG,EAAI;AAC9G,gBAAIA,GAAG,KAAK,KAAZ,EAAmB;AACjB,kBAAME,gBAAgB,GAAqB;AACzCC,0BAAU,EAAE,KAD6B;AAEzCC,qBAAK,EAAE;AACLlB,2BAAS,EAAE,MAAI,CAACW,YAAL,CAAkBxC,QAAlB,CAA2B6B,SAA3B,CAAqCzB,KAD3C;AAEL0B,0BAAQ,EAAE,MAAI,CAACU,YAAL,CAAkBxC,QAAlB,CAA2B8B,QAA3B,CAAoC1B,KAFzC;AAGLsB,uBAAK,EAAE,MAAI,CAACc,YAAL,CAAkBxC,QAAlB,CAA2B0B,KAA3B,CAAiCtB,KAHnC;AAIL2B,0BAAQ,EAAE,MAAI,CAACO,sBAAL,CAA4BtC,QAA5B,CAAqC+B,QAArC,CAA8C3B;AAJnD;AAFkC,eAA3C;;AASA,oBAAI,CAACe,IAAL,CAAU8B,GAAV,CAAc,YAAM;AAClB,sBAAI,CAAChC,MAAL,CAAYiC,aAAZ,CAA0B,sBAA1B,EAAkDL,gBAAlD;AACD,eAFD;AAGD,aAbD,MAaO;AACL,oBAAI,CAACvB,QAAL,GAAgB,IAAhB;AACA,oBAAI,CAACC,KAAL,GAAa,mDAAb;AACD;AACF,WAlBD,EAkBG,UAAAA,KAAK,EAAI;AACV+B,mBAAO,CAACC,GAAR,CAAYhC,KAAZ;AACA,kBAAI,CAACD,QAAL,GAAgB,IAAhB;AACA,kBAAI,CAACC,KAAL,GAAa,mCAAb;AACD,WAtBD;AAwBD;;;;;;;uBA5HUR,Y,EAAY,2H,EAAA,uH,EAAA,wH,EAAA,qH,EAAA,wI;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,e;AAAA,c;AAAA,mgD;AAAA;AAAA;ACdzB;;AACE;;AACE;;AACE;;AACE;;AACE;;AACF;;AACF;;AACF;;AACF;;AAAI;;AAAc;;AAClB;;AACE;;AAAyB;;AAAsE;;AAAa;;AAC9G;;AACA;;AAAiC;AAAA,mBAAY,IAAAyC,QAAA,EAAZ;AAAsB,WAAtB;;AAC/B;;AACE;;AACE;;AACE;;AACE;;AACA;;AACE;;AAKF;;AACF;;AACF;;AACA;;AACE;;AACE;;AACA;;AACE;;AAKF;;AACF;;AACF;;AACF;;AACA;;AACE;;AACE;;AACE;;AACA;;AACE;;AAKF;;AACF;;AACF;;AACF;;AACA;;AACE;;AACE;;AACE;;AACE;;AACA;;AAAgC;AAAA,mBAAS,IAAAC,kBAAA,EAAT;AAA6B,WAA7B;;AAA+B;;AACjE;;AACA;;AACE;;AAKF;;AACA;;AACE;;AACF;;AACA;;AACE;;AAKF;;AACF;;AAEA;;AACE;;AAKF;;AACA;;AACI;;AAGJ;;AACF;;AACF;;AAIF;;AACA;;AACE;;AAAgG;;AAAQ;;AAC1G;;AACF;;AACA;;AACE;;AACE;;AACA;;AACF;;AACA;;AAIF;;AACA;;AACF;;;;AAlHuB;;AAWS;;AAAA;;AAExB;;AAAA;;AAOoB;;AAAA;;AAYA;;AAAA;;AAcA;;AAAA;;AAamB;;AAAA;;AAInB;;AAAA;;AAOmB;;AAAA;;AAGnB;;AAAA;;AASF;;AAAA;;AAOe;;AAAA;;AAW4B;;AAAA;;AAQW;;AAAA;;;;;;;;;sED9FnE1C,Y,EAAY;cALxB,uDAKwB;eALd;AACT2C,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKc,Q","file":"pages-register-register-module-es5.js","sourcesContent":["import { FormControl, FormGroup } from '@angular/forms';\r\n\r\nexport class PasswordValidator {\r\n  // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\r\n  static areEqual(formGroup: FormGroup) {\r\n    let val;\r\n    let valid = true;\r\n\r\n    for (const key in formGroup.controls) {\r\n      if (formGroup.controls.hasOwnProperty(key)) {\r\n        const control: FormControl = formGroup.controls[key] as FormControl;\r\n\r\n        if (val === undefined) {\r\n          val = control.value;\r\n        } else {\r\n          if (val !== control.value) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (valid) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      areEqual: true,\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RegisterPage } from './register.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegisterPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RegisterPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { RegisterPageRoutingModule } from './register-routing.module';\r\n\r\nimport { RegisterPage } from './register.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    RegisterPageRoutingModule\r\n  ],\r\n  declarations: [RegisterPage]\r\n})\r\nexport class RegisterPageModule {}\r\n","import { Component, NgZone, OnInit } from '@angular/core';\r\nimport { Router, NavigationExtras } from '@angular/router';\r\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { PasswordValidator } from 'src/app/objects/validators/password.validator';\r\nimport { AccountsService } from 'src/app/backend/clients';\r\nimport { take } from 'rxjs/operators';\r\nimport { SsoUser } from 'src/app/backend/clients/model/ssoUser';\r\nimport { Platform } from '@ionic/angular';\r\n\r\n@Component({\r\n  selector: 'register',\r\n  templateUrl: './register.page.html',\r\n  styleUrls: ['./register.page.scss'],\r\n})\r\nexport class RegisterPage implements OnInit {\r\n  matchingPasswordsGroup: FormGroup;\r\n  passwordType = 'password';\r\n  hasError = false;\r\n  error = '';\r\n  registerForm: FormGroup;\r\n  showAppleSignIn = false;\r\n\r\n  validationMessages = {\r\n    email: [\r\n      { type: 'required', message: 'Email is required.' },\r\n      { type: 'pattern', message: 'Please enter a valid email.' }\r\n    ],\r\n    firstName: [\r\n      { type: 'required', message: 'First name is required.' }\r\n    ],\r\n    lastName: [\r\n      { type: 'required', message: 'Last name is required.' }\r\n    ],\r\n    password: [\r\n      { type: 'required', message: 'Password is required.' },\r\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' },\r\n      { type: 'pattern', message: 'Your password must contain an uppercase, lowercase, number, and character.' }\r\n    ],\r\n    confirmPassword: [\r\n      { type: 'required', message: 'Confirm password is required.' }\r\n    ],\r\n    matchingPasswords: [\r\n      { type: 'areEqual', message: 'Password mismatch.' }\r\n    ],\r\n  };\r\n\r\n  constructor(\r\n    public formBuilder: FormBuilder,\r\n    public router: Router,\r\n    private platform: Platform,\r\n    private zone: NgZone,\r\n    private accountService: AccountsService\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.showAppleSignIn = this.platform.is('ios');\r\n\r\n    const email = new FormControl('', Validators.compose([\r\n      Validators.required,\r\n      Validators.pattern('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}$')\r\n    ]));\r\n    this.matchingPasswordsGroup = new FormGroup({\r\n      password: new FormControl('', Validators.compose([\r\n        Validators.minLength(7),\r\n        Validators.required,\r\n        Validators.pattern('^(?=.*[0-9])(?=.*[!@#$%.^&*?])[a-zA-Z0-9!@#$%.^&*?]{7,25}$')\r\n      ])),\r\n      confirmPassword: new FormControl('', Validators.required)\r\n    }, (formGroup: FormGroup) => {\r\n      return PasswordValidator.areEqual(formGroup);\r\n    });\r\n    const firstName = new FormControl('', Validators.required);\r\n    const lastName = new FormControl('', Validators.required);\r\n    this.registerForm = new FormGroup({\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      matchingPasswords: this.matchingPasswordsGroup,\r\n    });\r\n  }\r\n\r\n  togglePasswordMode() {\r\n    this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\r\n  }\r\n\r\n  async openAppleSignIn() {\r\n    await this.accountService.loginApple().then(async (res: SsoUser) => {\r\n        if (res.firstLogin === true) {\r\n          const navigationExtras: NavigationExtras = {\r\n            replaceUrl: false,\r\n            state: {\r\n              firstName: res.firstName,\r\n              lastName: res.lastName,\r\n              email: res.email,\r\n              password: '',\r\n              sso: true\r\n            }\r\n          };\r\n          this.zone.run(() => {\r\n            this.router.navigateByUrl('/post-register-about', navigationExtras);\r\n          });\r\n        } else {\r\n          const navigationExtras: NavigationExtras = {\r\n            replaceUrl: false\r\n          };\r\n          this.zone.run(() => {\r\n            this.router.navigateByUrl('/tab1', navigationExtras);\r\n          });\r\n        }\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.accountService.accountEmailTakenGet(this.registerForm.controls.email.value).pipe(take(1)).subscribe(res => {\r\n      if (res === false) {\r\n        const navigationExtras: NavigationExtras = {\r\n          replaceUrl: false,\r\n          state: {\r\n            firstName: this.registerForm.controls.firstName.value,\r\n            lastName: this.registerForm.controls.lastName.value,\r\n            email: this.registerForm.controls.email.value,\r\n            password: this.matchingPasswordsGroup.controls.password.value\r\n          }\r\n        };\r\n        this.zone.run(() => {\r\n          this.router.navigateByUrl('/post-register-about', navigationExtras);\r\n        });\r\n      } else {\r\n        this.hasError = true;\r\n        this.error = 'An account with this email is already registered.';\r\n      }\r\n    }, error => {\r\n      console.log(error);\r\n      this.hasError = true;\r\n      this.error = 'An unexpected error has occurred.';\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","<ion-content no-bounce [scrollY]=\"false\">\r\n  <div class = \"splash\">\r\n    <ion-row class=\"ion-align-items-baseline\">\r\n      <ion-col class=\"ion-justify-content-start\">\r\n        <ion-buttons>\r\n          <ion-back-button defaultHref=\"/sign-in\"  style=\"color: beige;\"></ion-back-button>\r\n        </ion-buttons>\r\n      </ion-col>  \r\n    </ion-row> \r\n  <h1>Create Account</h1>\r\n  <p class=\"back-to-login\">\r\n    Already have an account? <a [routerLink]=\"['/sign-in']\" routerLinkActive=\"router-link-active\" >Login instead</a>\r\n  </p>\r\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">  \r\n    <ion-grid>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item class=\"roundedInput\">\r\n            <ion-input autocapitalize=\"true\" placeholder=\"First Name*\" type=\"text\" formControlName=\"firstName\" required></ion-input>\r\n            <div class=\"validation-errors\">\r\n              <ng-container *ngFor=\"let validation of validationMessages.firstName\">\r\n                <div class=\"error-message\" *ngIf=\"registerForm.get('firstName').hasError(validation.type) && (registerForm.get('firstName').dirty || registerForm.get('firstName').touched)\">\r\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\r\n                </div>\r\n              </ng-container>\r\n            </div>\r\n          </ion-item>\r\n        </ion-col>\r\n        <ion-col>\r\n          <ion-item class=\"roundedInput\">\r\n            <ion-input autocapitalize=\"true\" placeholder=\"Last Name*\" type=\"text\" formControlName=\"lastName\" required></ion-input>\r\n            <div class=\"validation-errors\">\r\n              <ng-container *ngFor=\"let validation of validationMessages.lastName\">\r\n                <div class=\"error-message\" *ngIf=\"registerForm.get('lastName').hasError(validation.type) && (registerForm.get('lastName').dirty || registerForm.get('lastName').touched)\">\r\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\r\n                </div>\r\n              </ng-container>\r\n            </div>\r\n          </ion-item>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-item class=\"roundedInput\">\r\n            <ion-input autocapitalize=\"true\" placeholder=\"Email*\" type=\"email\" formControlName=\"email\" required></ion-input>\r\n            <div class=\"validation-errors\">\r\n              <ng-container *ngFor=\"let validation of validationMessages.email\">\r\n                <div class=\"error-message\" *ngIf=\"registerForm.get('email').hasError(validation.type) && (registerForm.get('email').dirty || registerForm.get('email').touched)\">\r\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\r\n                </div>\r\n              </ng-container>\r\n            </div>\r\n          </ion-item>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <div formGroupName=\"matchingPasswords\">\r\n            <ion-item class=\"roundedInput\">\r\n              <ion-input autocapitalize=\"true\" [type]=\"passwordType\" placeholder=\"Password*\" formControlName=\"password\" required></ion-input>\r\n              <ion-icon name=\"eye\" item-right (click)=\"togglePasswordMode()\"></ion-icon>    \r\n            </ion-item>\r\n            <div class=\"validation-errors\">\r\n              <ng-container *ngFor=\"let validation of validationMessages.password\">\r\n                <div class=\"error-message\" *ngIf=\"registerForm.get('matchingPasswords').get('password').hasError(validation.type) && (registerForm.get('matchingPasswords').get('password').dirty || registerForm.get('matchingPasswords').get('password').touched)\">\r\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\r\n                </div>\r\n              </ng-container>\r\n            </div>\r\n            <ion-item class=\"roundedInput\" style=\"margin-top: 10px;\">\r\n              <ion-input autocapitalize=\"true\" [type]=\"passwordType\"  placeholder=\"Confirm Password*\" formControlName=\"confirmPassword\" required></ion-input>\r\n            </ion-item>\r\n            <div class=\"validation-errors\">\r\n              <ng-container *ngFor=\"let validation of validationMessages.confirmPassword\">\r\n                <div class=\"error-message\" *ngIf=\"registerForm.get('matchingPasswords').get('confirmPassword').hasError(validation.type) && (registerForm.get('matchingPasswords').get('confirmPassword').dirty || registerForm.get('matchingPasswords').get('confirmPassword').touched)\">\r\n                  <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\r\n                </div>\r\n              </ng-container>\r\n            </div>\r\n          </div>\r\n          <!-- These validations are for the form group -->\r\n          <div class=\"validation-errors\">\r\n            <ng-container *ngFor=\"let validation of validationMessages.matchingPasswords\">\r\n              <div class=\"error-message\" *ngIf=\"registerForm.get('matchingPasswords').hasError(validation.type) && (registerForm.get('matchingPasswords').get('confirmPassword').dirty || registerForm.get('matchingPasswords').get('confirmPassword').touched)\">\r\n                <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n          <div class=\"validation-errors\">\r\n              <div class=\"error-message\" *ngIf=\"hasError\">\r\n                <ion-icon name=\"information-circle-outline\"></ion-icon> {{ error }}\r\n              </div>\r\n          </div>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!-- <ion-row color=\"primary\" justify-content-center *ngIf=\"displayError\">\r\n        <ion-text color=\"danger\">{{error}}</ion-text>\r\n      </ion-row> -->\r\n    </ion-grid>\r\n    <div class=\"button-div\">\r\n      <ion-button class=\"submit-button\" expand=\"block\" type=\"submit\" [disabled]=\"!registerForm.valid\">Register</ion-button>\r\n    </div>\r\n  </form>\r\n  <div class=\"button-div\">\r\n    <ion-button class=\"facebook-button\" expand=\"block\">\r\n      <ion-icon  slot=\"start\" name=\"logo-facebook\"></ion-icon>\r\n      Login with Facebook\r\n    </ion-button>\r\n    <ion-button class=\"apple-button\" expand=\"block\" (click)=\"openAppleSignIn()\" *ngIf=\"showAppleSignIn\">\r\n      <ion-icon slot=\"start\" name=\"logo-apple\"></ion-icon>\r\n      Sign in with Apple\r\n    </ion-button>\r\n  </div>\r\n  </div>\r\n</ion-content>\r\n"]}