{"version":3,"sources":["webpack:///src/app/pages/sign-in/sign-in-routing.module.ts","webpack:///src/app/pages/sign-in/sign-in.module.ts","webpack:///src/app/pages/sign-in/sign-in.page.ts","webpack:///src/app/pages/sign-in/sign-in.page.html"],"names":["routes","path","component","SignInPageRoutingModule","forChild","imports","exports","SignInPageModule","declarations","SignInPage","formBuilder","loadingController","modalController","platform","cd","zone","router","accountService","passwordType","validationMessages","email","type","message","password","invalidLogin","invalidLoginText","showAppleSignIn","is","compose","required","pattern","loginForm","loginApple","values","loginModel","userName","controls","value","create","duration","loading","present","login","then","res","console","log","run","navigationExtras","replaceUrl","navigateByUrl","dismiss","err","code","refresh","state","showBackdrop","cssClass","modal","onDidDismiss","dataReturned","detectChanges","onSubmit","togglePasswordMode","openRegister","presentForgotPassword","selector","templateUrl","styleUrls"],"mappings":"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","file":"pages-sign-in-sign-in-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SignInPage } from './sign-in.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignInPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SignInPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SignInPageRoutingModule } from './sign-in-routing.module';\n\nimport { SignInPage } from './sign-in.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    SignInPageRoutingModule,\n  ],\n  declarations: [SignInPage],\n})\nexport class SignInPageModule {}\n","import { ChangeDetectorRef, Component, NgZone, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  FormControl,\n  Validators,\n} from '@angular/forms';\nimport { LoadingController, ModalController, Platform } from '@ionic/angular';\nimport { Router, NavigationExtras } from '@angular/router';\nimport { AccountsService, LoginApiRequest } from 'src/app/backend/clients';\nimport { ForgotPasswordPage } from '../modals/forgot-password/forgot-password.page';\n\n\n@Component({\n  selector: 'sign-in',\n  templateUrl: './sign-in.page.html',\n  styleUrls: ['./sign-in.page.scss'],\n})\nexport class SignInPage implements OnInit {\n  passwordType = 'password';\n  loginForm: FormGroup;\n\n  validationMessages = {\n    email: [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please enter a valid email.' },\n    ],\n    password: [{ type: 'required', message: 'Password is required.' }],\n  };\n\n  invalidLogin = false;\n  invalidLoginText = '';\n  showAppleSignIn = false;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    public loadingController: LoadingController,\n    public modalController: ModalController,\n    private platform: Platform,\n    private cd: ChangeDetectorRef,\n    private zone: NgZone,\n    private router: Router,\n    private accountService: AccountsService\n  ) {}\n\n  togglePasswordMode() {\n    this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\n  }\n\n  async ngOnInit() {\n    // Only show the Apple sign in button on iOS\n    this.showAppleSignIn = this.platform.is('ios');\n\n    const email = new FormControl(\n      '',\n      Validators.compose([\n        Validators.required,\n        Validators.pattern('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,3}$'),\n      ])\n    );\n    const password = new FormControl(\n      '',\n      Validators.compose([Validators.required])\n    );\n    this.loginForm = new FormGroup({\n      email,\n      password,\n    });\n  }\n\n  openAppleSignIn() {\n    this.accountService.loginApple();\n  }\n\n  async onSubmit(values) {\n    const loginModel = {\n      userName: this.loginForm.controls.email.value,\n      password: this.loginForm.controls.password.value,\n    } as LoginApiRequest;\n\n    const loading = await this.loadingController.create({\n      duration: 2000,\n    });\n    await loading.present();\n\n    this.accountService.login(loginModel.userName, loginModel.password).then(\n      (res) => {\n        console.log(res);\n        this.invalidLogin = false;\n\n        this.zone.run(() => {\n          const navigationExtras: NavigationExtras = {\n            replaceUrl: false,\n            // state: {\n            //   userId: value.id\n            // }\n          };\n          this.router.navigateByUrl('/tab1', navigationExtras);\n        });\n        loading.dismiss();\n      },\n      (err) => {\n        if (err.code === 'auth/user-not-found') {\n          this.invalidLoginText = 'User not found';\n        } else if (err.code === 'auth/wrong-password') {\n          this.invalidLoginText = 'Invalid password';\n        } else {\n          this.invalidLoginText = 'Unexpected error';\n        }\n\n        this.invalidLogin = true;\n        this.refresh();\n        loading.dismiss();\n      }\n    );\n  }\n\n  openRegister() {\n    const navigationExtras: NavigationExtras = {\n      replaceUrl: false,\n      state: {\n        // userName: 'tester',\n      },\n    };\n    this.zone.run(() => {\n      this.router.navigateByUrl('/register', navigationExtras);\n    });\n  }\n\n  async presentForgotPassword() {\n    const modal = await this.modalController.create({\n      component: ForgotPasswordPage,\n      showBackdrop: true,\n      cssClass: 'forgot-password-modal',\n    });\n\n    modal.onDidDismiss().then(async (dataReturned) => {\n      if (dataReturned !== null) {\n        // this.filter = dataReturned.data;\n        // this.refreshPosts();\n        // await this.loadingController.dismiss();\n      }\n    });\n\n    return await modal.present();\n  }\n\n  refresh() {\n    this.cd.detectChanges();\n  }\n\n  get getInvalidLogin() {\n    return this.invalidLogin;\n  }\n}\n","<ion-content no-bounce [scrollY]=\"false\" class=\"form-content\">\n  <div class=\"splash\">\n    <h1>Welcome</h1>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">\n      <ion-item class=\"roundedInput\">\n        <ion-input\n          autocapitalize=\"true\"\n          placeholder=\"Email\"\n          type=\"email\"\n          formControlName=\"email\"\n          required\n        ></ion-input>\n        <div class=\"validation-errors\">\n          <ng-container *ngFor=\"let validation of validationMessages.email\">\n            <div\n              class=\"error-message\"\n              *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\"\n            >\n              <ion-icon name=\"information-circle-outline\"></ion-icon> {{\n              validation.message }}\n            </div>\n          </ng-container>\n        </div>\n      </ion-item>\n      <ion-item class=\"roundedInput\">\n        <ion-input\n          autocapitalize=\"true\"\n          [type]=\"passwordType\"\n          placeholder=\"Password\"\n          formControlName=\"password\"\n          required\n        ></ion-input>\n        <ion-icon\n          name=\"eye\"\n          item-right\n          (click)=\"togglePasswordMode()\"\n        ></ion-icon>\n      </ion-item>\n      <div class=\"validation-errors\">\n        <div class=\"error-message\" *ngIf=\"getInvalidLogin\">\n          <ion-icon name=\"information-circle-outline\"></ion-icon>\n          {{invalidLoginText}}\n        </div>\n      </div>\n      <div class=\"button-div\">\n        <ion-button\n          class=\"submit-button\"\n          expand=\"block\"\n          type=\"submit\"\n          [disabled]=\"!loginForm.valid\"\n          >Login</ion-button\n        >\n      </div>\n    </form>\n    <div>\n      <ion-button\n        class=\"submit-button\"\n        expand=\"block\"\n        type=\"submit\"\n        (click)=\"openRegister()\"\n        >Register</ion-button\n      >\n    </div>\n    <div class=\"button-div\">\n      <ion-button class=\"facebook-button\" expand=\"block\">\n        <ion-icon slot=\"start\" name=\"logo-facebook\"></ion-icon>\n        Login with Facebook\n      </ion-button>\n      <ion-button class=\"apple-button\" expand=\"block\" (click)=\"openAppleSignIn()\" *ngIf=\"showAppleSignIn\">\n        <ion-icon slot=\"start\" name=\"logo-apple\"></ion-icon>\n        Sign in with Apple\n      </ion-button>\n      <h3 class=\"forgot-password-link center-any-object\" (click)=\"presentForgotPassword()\">Forgot Password?</h3>\n    </div>\n  </div>\n</ion-content>\n"]}