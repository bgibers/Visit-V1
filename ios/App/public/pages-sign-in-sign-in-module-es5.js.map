{"version":3,"sources":["webpack:///src/app/pages/sign-in/sign-in-routing.module.ts","webpack:///src/app/pages/sign-in/sign-in.module.ts","webpack:///src/app/pages/sign-in/sign-in.page.ts","webpack:///src/app/pages/sign-in/sign-in.page.html"],"names":["routes","path","component","SignInPageRoutingModule","forChild","imports","exports","SignInPageModule","declarations","SignInPage","formBuilder","loadingController","router","accountService","passwordType","validationMessages","email","type","message","password","compose","required","pattern","loginForm","values","loginModel","userName","controls","value","create","duration","loading","present","login","then","invalidLogin","dismiss","navigationExtras","navigateByUrl","replaceUrl","state","onSubmit","togglePasswordMode","openRegister","selector","templateUrl","styleUrls"],"mappings":"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","file":"pages-sign-in-sign-in-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SignInPage } from './sign-in.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignInPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SignInPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SignInPageRoutingModule } from './sign-in-routing.module';\n\nimport { SignInPage } from './sign-in.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    SignInPageRoutingModule\n  ],\n  declarations: [SignInPage]\n})\nexport class SignInPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router, NavigationExtras } from '@angular/router';\nimport { AccountsService, LoginApiRequest } from 'src/app/backend/clients';\nimport { take } from 'rxjs/operators';\nimport { LoadingController } from '@ionic/angular';\n\n@Component({\n  selector: 'sign-in',\n  templateUrl: './sign-in.page.html',\n  styleUrls: ['./sign-in.page.scss'],\n})\nexport class SignInPage implements OnInit {\n  passwordType = 'password';\n  loginForm: FormGroup;\n\n\n  validationMessages = {\n    email: [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please enter a valid email.' }\n    ],\n    password: [\n      { type: 'required', message: 'Password is required.' }\n    ]\n  };\n\n  invalidLogin: boolean;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    public loadingController: LoadingController,\n    private router: Router,\n    private accountService: AccountsService\n  ) { }\n\n  togglePasswordMode() {\n    this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\n  }\n\n  ngOnInit() {\n    const email = new FormControl('', Validators.compose([\n      Validators.required,\n      Validators.pattern('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}$')\n    ]));\n    const password = new FormControl('', Validators.compose([\n      Validators.required\n    ]));\n    this.loginForm = new FormGroup({\n      email,\n      password\n    });\n  }\n\n  async onSubmit(values) {\n    const loginModel = {\n      userName: this.loginForm.controls.email.value,\n      password: this.loginForm.controls.password.value\n    } as LoginApiRequest;\n\n    const loading = await this.loadingController.create({\n      duration: 2000\n    });\n    await loading.present();\n\n    await this.accountService.login(loginModel.userName, loginModel.password).then(value => {\n\n      if (value === null) {\n        this.invalidLogin = true;\n        loading.dismiss();\n      }\n      const navigationExtras: NavigationExtras = {\n        // replaceUrl: false,\n        // state: {\n        //   userId: value.id\n        // }\n      };\n      loading.dismiss();\n      this.router.navigateByUrl('/tab1', navigationExtras);\n    });\n  }\n\n  openRegister() {\n    const navigationExtras: NavigationExtras = {\n      replaceUrl: false,\n      state: {\n        userName: 'tester'\n      }\n    };\n    this.router.navigateByUrl('/register', navigationExtras);\n  }\n\n}\n","<ion-content no-bounce [scrollY]=\"false\" class=\"form-content\">\n  <h1>Welcome</h1>\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">  \n    <ion-item class=\"roundedInput\">\n      <ion-input autocapitalize=\"true\" placeholder=\"Email\" type=\"email\" formControlName=\"email\" required></ion-input>\n      <div class=\"validation-errors\">\n        <ng-container *ngFor=\"let validation of validationMessages.email\">\n          <div class=\"error-message\" *ngIf=\"loginForm.get('email').hasError(validation.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\">\n            <ion-icon name=\"information-circle-outline\"></ion-icon> {{ validation.message }}\n          </div>\n        </ng-container>\n      </div>\n    </ion-item>\n    <ion-item class=\"roundedInput\">\n      <ion-input autocapitalize=\"true\" [type]=\"passwordType\" placeholder=\"Password\" formControlName=\"password\" required></ion-input>\n      <ion-icon name=\"eye\" item-right (click)=\"togglePasswordMode()\"></ion-icon>    \n    </ion-item>\n    <div class=\"validation-errors\">\n        <div class=\"error-message\" *ngIf=\"invalidLogin\">\n          <ion-icon name=\"information-circle-outline\"></ion-icon> Incorrect username/password\n        </div>\n    </div>\n    <div class=\"button-div\">\n      <ion-button class=\"submit-button\" expand=\"block\" type=\"submit\" [disabled]=\"!loginForm.valid\">Login</ion-button>\n    </div>\n  </form>\n  <div>\n    <ion-button class=\"submit-button\" expand=\"block\"  type=\"submit\" (click)=\"openRegister()\">Register</ion-button>\n  </div>\n  <div class=\"button-div\">\n    <ion-button class=\"facebook-button\" expand=\"block\">\n      <ion-icon  slot=\"start\" name=\"logo-facebook\"></ion-icon>\n      Login with Facebook\n    </ion-button>\n    <ion-button class=\"apple-button\" expand=\"block\">\n      <ion-icon slot=\"start\" name=\"logo-apple\"></ion-icon>\n      Sign in with Apple\n    </ion-button>\n  </div>\n\n</ion-content>\n"]}